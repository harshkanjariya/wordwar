import Fastify from "fastify";
import 'reflect-metadata';
import * as functions from "firebase-functions";

import {errorHandler} from "./bootstrap/errors/error-handler";
import {onRequestHook} from "./bootstrap/hooks/onRequest";
import {onSendHook} from "./bootstrap/hooks/onSend";
import {registerCors} from "./bootstrap/config/cors";
import {registerJwt} from "./bootstrap/config/jwt";
import {registerMultipart} from "./bootstrap/plugins/multipart";
import {registerStatic} from "./bootstrap/config/static";
import {setupServices} from "./bootstrap/plugins/services";

// Import all routes
import * as authRoutes from "./routes/auth";
import * as usersRoutes from "./routes/users";
import * as brandsRoutes from "./routes/brands";
import * as cartRoutes from "./routes/cart";
import * as configurationsRoutes from "./routes/configurations";
import * as filesRoutes from "./routes/files";
import * as ordersRoutes from "./routes/orders";
import * as paymentRoutes from "./routes/payment";
import * as productsRoutes from "./routes/products";
import * as shippingAddressesRoutes from "./routes/shipping-addresses";
import * as webhooksRoutes from "./routes/webhooks";

// Import admin routes
import * as adminAuthRoutes from "./routes/admin/auth";
import * as adminUsersRoutes from "./routes/admin/users";
import * as adminRolesRoutes from "./routes/admin/roles";
import * as adminOrdersRoutes from "./routes/admin/orders";
import * as adminPaymentsRoutes from "./routes/admin/payments";
import * as adminProductsRoutes from "./routes/admin/products";
import * as adminBrandsRoutes from "./routes/admin/brands";
import * as adminAnalyticsRoutes from "./routes/admin/analytics";
import * as adminConfigurationsRoutes from "./routes/admin/configurations";
import * as adminImageLibraryRoutes from "./routes/admin/image-library";
import * as adminIntegrationsRoutes from "./routes/admin/integrations";
import * as adminPageRoutes from "./routes/admin/page";

let cachedServer: ReturnType<typeof Fastify> | null = null;

const createServer = async () => {
  if (cachedServer) return cachedServer;

  const server = Fastify({
    logger: false
  });

  server.setErrorHandler(errorHandler(server));
  server.addHook("onRequest", onRequestHook(server));
  server.addHook("onSend", onSendHook);

  server.get("/health-check", async () => "ok");

  registerCors(server);
  registerJwt(server);
  registerMultipart(server);
  registerStatic(server);

  const routes = [
    authRoutes, usersRoutes, brandsRoutes, cartRoutes, configurationsRoutes,
    filesRoutes, ordersRoutes, paymentRoutes, productsRoutes,
    shippingAddressesRoutes, webhooksRoutes,

    adminAuthRoutes, adminUsersRoutes, adminRolesRoutes, adminOrdersRoutes,
    adminPaymentsRoutes, adminProductsRoutes, adminBrandsRoutes,
    adminAnalyticsRoutes, adminConfigurationsRoutes,
    adminImageLibraryRoutes, adminIntegrationsRoutes, adminPageRoutes
  ];

  for (const route of routes) {
    if (route?.default) {
      const prefix = (route.autoPrefix || "").trim();
      server.register(route.default, {prefix});
    }
  }

  await setupServices();
  await server.ready();

  cachedServer = server;
  return server;
};

// For local dev
if (process.env.NODE_ENV === 'local') {
  createServer().then(server => {
    const port = parseInt(process.env.PORT || "10000", 10);
    server.listen({port, host: "0.0.0.0"}, (err: any) => {
      if (err) {
        server.log.error(err);
        process.exit(1);
      }
      console.log(`Server running at http://localhost:${port}`);
    });
  });
}


const serverPromise = createServer(); // initialize once at top level

// âœ… Export Firebase Function
export const api = functions
  .https.onRequest({memory: "512MiB", cors: true}, async (req, res) => {
    const server = await serverPromise;
    server.server.emit("request", req, res);
  });
